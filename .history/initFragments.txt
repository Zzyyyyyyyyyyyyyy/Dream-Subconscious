function initFragments(blockRoot, threadRoot) {
  const state = {
    selected: [], // array of data-id strings
    scratch: new WeakMap(), // cardEl -> {canvas, ctx, drawing}
    audio: null
  };

  // Prepare titles for hover fragmentation (wrap each char)
  const titles = blockRoot.querySelectorAll('[data-role="title"]');
  titles.forEach(wrapTitleChars);

  // Initialize scratch layers per card
  const cards = blockRoot.querySelectorAll('[data-card="item"]');
  cards.forEach(setupScratchForCard);

  // Event delegation for selection and scratching
  blockRoot.addEventListener('click', onClick);
  blockRoot.addEventListener('pointerdown', onPointerDown);
  blockRoot.addEventListener('pointermove', onPointerMove);
  blockRoot.addEventListener('pointerup', onPointerUp);
  blockRoot.addEventListener('pointercancel', onPointerUp);

  // Resize observer to keep canvas in sync
  const ro = new ResizeObserver(entries => {
    for (const entry of entries) {
      const card = entry.target.closest('[data-card="item"]');
      if (card) resizeCanvas(card);
    }
  });
  cards.forEach(card => ro.observe(card));

  updateThread();

  // -------------
  // Event handlers
  // -------------
  function onClick(event) {
    const selectBtn = event.target.closest(SELECTORS.actions.selectCard);
    if (selectBtn && blockRoot.contains(selectBtn)) {
      event.preventDefault();
      const card = selectBtn.closest('[data-card="item"]');
      if (!card) return;
      toggleSelect(card, selectBtn);
      updateThread();
      playAmbientSlice();
    }
}

// ----------------------------
// Notes Block (Page 2)
// Archives current thread sentences into a small ledger.
// ----------------------------
