AGENTS.md

Purpose: Shared conventions for AI assistants and human contributors. Keep structure and naming strict; prioritize semantics and maintainable hierarchy over visuals.

1) Overview
- Semantic HTML: Use meaningful elements (`header`, `main`, `section`, `article`, `footer`, `nav`). One `<h1>` per page; `<h2>` for section headings within Blocks.
- BEM: Block `block`, Element `block__element`, Modifier `block--modifier`.
- ES Modules: `scripts/main.js` is module‑style, no bundler required. Prefer constants for selectors and event delegation.
- Single Responsibility: HTML for structure, CSS for presentation, JS for behavior.

2) Folder Structure & Blocks
- Root files: `index.html`, `README.md`, `AGENTS.md`.
- Styles: `styles/main.css` (single file for now). Add new Blocks within the Components section.
- Scripts: `scripts/main.js` (ES module entry). Keep block‑specific logic scoped to block roots.
- Assets: `assets/images/` holds images. Keep a `.gitkeep` while empty.
- New Blocks: When adding a new top‑level `section` in `<main>`, treat it as a Block with BEM naming and add a brief note in the Change Log (section 7).

3) HTML Rules
- Headings: one `<h1>` per page; `<h2>` for block headings; maintain proper hierarchy.
- JS Hooks: use `data-*` attributes (e.g., `data-block="timeline"`, `data-action="toggle-item"`); do not target classes for behavior.
- Links: external links must include `target="_blank"` and `rel="noopener noreferrer"`.
- Images: every `<img>` needs a meaningful `alt`; use `figure` + `figcaption` when captions are present.
- Attribute order: `id`, `class`, `data-*`, `aria-*`, `href/src`, `type`, `target`, `rel`, `alt`, `title`, `role`.
- Paths: relative only (e.g., `./assets/images/...`).

4) CSS Rules
- Single file for now: `styles/main.css` with the following order:
  1) Reset/normalize
  2) Base/typography (generic tags only)
  3) Layout (containers/grids)
  4) Components/Blocks (BEM)
  5) Utilities/helpers
- Within each Block section: order styles as block root �?elements �?modifiers �?states; keep related rules together.
- Add comments at block boundaries describing parent–child relationships.
- Avoid inline styles and `!important`. Prefer class‑based composition and BEM modifiers.
- Keep structure‑oriented styles only in this phase (no colors/sizes).

5) JS Rules
- ES modules only; keep selectors/constants at the top.
- Prefer event delegation for dynamic children (bind on block root, not on each child).
- Scope DOM queries to the relevant Block root whenever possible.
- Organize code by phases: query �?bind events �?update DOM. Comment each phase.
- Use `data-*` attributes for behavior; avoid class‑based selectors in JS.

6) Formatting Rules
- Indentation: 2 spaces. Encoding: UTF�?. Newlines: LF. End every file with a trailing newline.
- No trailing spaces. Keep imports/links ordered: CSS before JS; defer JS. Use `type="module"` for scripts.
- Consistent attribute order as specified in section 3.

- 2025-09-09: Initial scaffold created: index.html, styles/main.css, scripts/main.js, ssets/images/.gitkeep, updated README.md, and established conventions in AGENTS.md.
- 2025-09-10: Added chaos block (Page 3) to index.html, structural CSS in styles/main.css, and interactions in scripts/main.js (Enter Chaos, Panic Mode P, Fear Reveal hold).
